
import java.util.Random;
import java.lang.*;

/**
 * Created by IZEM & MCHIPO on 13/10/2017.
 */
public class VectorHelper {

    /**
     * Le vecteur sur lequel on effectue les opertations
     */
    private final int MAX = 3000 ;
    private double[] Vec;
    private double[] Sum;
    private double c=0 ;
    private int Table[];

    /**
     * La valeur maximale qu'un element peut prendre
     */
    private static int elemMax = 100;

    /**
     * Le maximum du vecteur
     */
    private int max;

    /**
     * Le minimum du vecteur
     */
    private int min;


    /**
     *  Constructeur tabled'un vecteur en lui affectant un autre
     *  @param table un vecteur exterieur a affecter directement
     */
    public VectorHelper(int[] table) {
        Table = table;
    }


    /**
     *  Constructeur d'un vecteur aleatoire en lui donnant la  taille
     *  @param n la taille du vecteur
     */
    public VectorHelper(int n)
        {
                Table = new int[n];
                Random rand = new Random();
            for (int i=0;i<n;i++)
                {
                    Table[i]= rand.nextInt(elemMax);
                }
        }

    /**
     * Afficher le minimum et le maximum du vecteur
     */
        public void ShowMinMax()
        {
            System.out.println("Min = "+min);
            System.out.println("Max = "+max);
        }

    /**
     * Afficher le vecteur
     */
        public void ShowTAB()
        {
            for(int i=0;i<Table.length;i++)
            {
                System.out.print(" | "+Table[i]);
            }
            System.out.print(" |");
            System.out.println("");
        }


    /**
     * Inverser le vecteur <br>
     * Exemple : Table = {4,5,6} Resultat: Table = {6,5,4}
     */
        public void InvTAB() {
            int i = 0, j = Table.length - 1, n = Table.length;
            while (i <=(n / 2)-1) {
                int m = Table[i];
                Table[i] = Table[j];
                Table[j] = m;
                i++;
                j--;
            }
        }

    /**
     * Obtenir le minimum et le maximum d'un vecteur <br>
     * Exemple : Table = {4,5,6,18,3} Resultat: Min = 3 et Max = 18
     */
        public void MinMax()
        {
            int i=1;
            int ma = Table[0],mi=Table[0];
            while (i<Table.length)
            {
                if (Table[i]>=ma){ma=Table[i];}
                if (Table[i]<=mi){mi=Table[i];}
                i++;
            }
            max = ma;
            min = mi;
        }

    /**
     * Multiplier toutes les case * n <br>
     * Exemple : Table = {4,9,6,2,8} et n=3  Resultat: Table = {12,27,18,6,24}
     * @param n Coefficient de la fonction
     */
        public void fonctionMult(int n)
        {
            for (int i=0;i<Table.length;i++)
            {
                Table[i] = Table[i]*n ;
            }
        }




 public double [] getVec() {return Vec;}
 
 
 /**
     * @returns Vec length . 
     */


    /**
     * This method to sort out v array elements.
     * @param v : array .
     * @param deb : indexes the element which needs to get sorted.
     * @param fin : indexes last element.
     */
    private void TriSelection(double v[],int deb, int fin) {
     int i = deb+1 ;
        while (deb<fin && i<v.length) {
         if(v[deb] > v[i]) {
             c = v[deb];
             v[deb] = v [i] ;
             v[i] = c ;
             i++;
         }
         else i++;
         if(i==v.length) {
             deb++;
             TriSelection(v,deb,fin);
         }
     }

    }

    /**
     * this method sorts array of the VectorHelper Array.
     */
    public void Sort() {
        TriSelection(Vec,0,Vec.length-1);
    }


    /**
     * this methods creates and implementes an array Vec with length n and elements a.
     * @param n: Array length.
     * @param a : Array Elements.
     */
    public void setVector(int n,double ...a){
        Vec = new double[n] ;
        if (n == Vec.length) {
           for (int i=0;i<n;i++){
               Vec[i]=a[i];
           }
        }

    }

    /**
     *this method prints Vec array elements.
     */
    public void PrintElements() {
        for (int i =0;i< Vec.length;i++){
            System.out.println(Vec[i]);
        }
    }

    /**
     * this method sums two Vectors if they have the same length, throws an exception else.
     * @param V1:Array .
     * @param V2: Array .
     * @return: the summed Array.
     * @throws TailleException
     */
    public double[] Sommer(double V1[], double V2[])  throws TailleException{

        if (V1.length != V2.length) throw new TailleException() ;
        else {
            Sum = new double[V1.length];
            for(int i=0;i<V1.length;i++) {
              Sum[i] = V1[i] + V2[i] ;
            }
            return Sum;
        }
    }


    /**
     * this methode generates automatically the Array Vec.
     * @param taille : length .
     */
    public void GenererAuto(int taille) {
       Vec = new double [taille] ;
       for(int i=0 ; i<taille;i++) {
           Vec[i] = Math.random()%54897846 ;
       }
    }




}
 
